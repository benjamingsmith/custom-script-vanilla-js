# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

interface AbstractService {
    attributes: JSON!
    type: String!
}

interface ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

interface RBMNVideo_Resource {
    "MIME type of the resource"
    mimeType: String
    "Mediabase resource type"
    resourceType: String
    "Resource URL"
    url: String
}

interface VideoResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    "The id of the resource"
    id: ID!
    "If set to true, embedding should not be offered for this asset. Used for exclusive content that should only live on redbull.com"
    noEmbedding: Boolean
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    "The partner who sponsored the creation of a content piece (financial or other support)"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Available subtitle-languages for the video asset in [RFC 5646](https://tools.ietf.org/html/rfc5646) notation. E.g. \"en\", \"en-US\", etc."
    subtitleLanguages: [String]
    trackingDimensions: JSON
    "The type of the resource"
    type: String!
    videoDurationSeconds: Int
    "Reference to video archive for playback (e.g. mediabase RBMN API)"
    videoEssence: AbstractService
    "Aspect ratio of the video-frame (width / height)"
    videoFrameAspectRatio: Float
}

union ActionTargetTypes = AcastPodcast | AttributeReferenceLink | AttributeWebLink | Bandsintown | BrightcoveVRVideo | BrightcoveVideo | CloudinaryImage | EventBriteCheckout | FacebookFollow | FacebookPost | Giphy | InstagramEmbed | InstagramFollow | JotForm | Kontest | MediabaseDeliveryAgentClips | MediabaseDeliveryAgentImage | MixcloudAudio | MixerVideo | PixleeEmbed | PlaybuzzGame | QzzrQuiz | RBMARadio | RBMNLive | RBMNVideo | RedBullImageserverImage | RedBullMeppEvent | RedBullMusicEvent | RedBullTVLinearStream | RedBullTVLiveVideostream | RedBullTVVideo | RiddleEmbed | Snapchat | SongkickFollow | SoundcloudAudio | SoundcloudSocialLink | Spotify | SpreakerAudio | ThingImage | TwitchChat | TwitchLiveVideo | TwitterFollow | TwitterTweetEmbed | VKPost | VKVideo | VimeoVideo | VineVideoClip | WayinEmbed | WufooForm | YoutubeVideo

union KeyValue_ValueUnion = AttributeText

union ParagraphUnion = AcastPodcast | AttributeEnumeration | AttributeQuote | AttributeRelatedContentContainer | AttributeTable | AttributeTextualArtefactContainer | Bandsintown | EpisodeVideo | ExternalContent | FacebookFollow | FacebookPost | Film | Giphy | GroupProfile | Image | ImageGallery | InstagramEmbed | InstagramFollow | JotForm | Kontest | LiveVideo | MixcloudAudio | MixerVideo | PartnerProfile | PersonProfile | PixleeEmbed | PlaybuzzGame | ProjectProfile | QzzrQuiz | RBMARadio | RecapVideo | RedBullTVLiveVideostream | RedBullTVVideo | RiddleEmbed | Snapchat | SongkickFollow | SoundcloudAudio | Spotify | Story | ThingImage | TrailerVideo | TwitchChat | TwitchLiveVideo | TwitterFollow | TwitterTweetEmbed | VKPost | VKVideo | Video | Video360 | VimeoVideo | VineVideoClip | WayinEmbed | WufooForm | YoutubeVideo

union QuoteAuthor = AttributeText | PersonProfile

union RelatedContentContainerUnion = ContentCollection | EpisodeVideo | EventProfile | EventSeries | ExternalContent | Film | GroupProfile | Image | ImageGallery | LiveVideo | Location | PartnerProfile | PersonProfile | ProjectProfile | RecapVideo | Show | Story | TrailerVideo | Video | Video360

union TableRowUnion = AttributeText | AttributeTextualArtefactContainer

union TextualArtefactContainerUnion = AttributeDateTime | AttributeLocation | AttributeReferenceLink | AttributeText | AttributeWebLink

"Add a Acast embed"
type AcastPodcast implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
    "Acast embed URL (https://embed.acast.com/redbulletin/thereboundqueen)"
    url: String!
}

type AllResourcesOfTypeConnection {
    edges: [ContentResourceEdge]
    pageInfo: PageInfo
}

"A call for a given action, e.g. to whach a video, follow a facebook user or to buy a ticket (through an web-link)"
type AttributeCallToAction {
    "When does the callToAction end, may be used to display a countdown"
    actionEndDateTime: AttributeDateTime @deprecated(reason : "warn")
    "An additional text describing why an action should be taken."
    actionMotivationDescription: AttributeDateTime @deprecated(reason : "warn")
    "Time from when the call to action is available"
    actionStartDateTime: AttributeDateTime @deprecated(reason : "warn")
    actionTargets: [ActionTargetTypes]
    actionType: String @deprecated(reason : "warn")
    labelLong: String @deprecated(reason : "warn")
    "The short label may be used on action buttons, etc."
    labelShort: String @deprecated(reason : "warn")
    type: String!
}

"Add a variation of an attribute for a specific context (e.g. if used in a social media context)"
type AttributeContextualTextAttribute {
    featured: AttributeText
    seo: AttributeText
    social: AttributeText
    type: String!
}

"Store a date"
type AttributeDate {
    "A date string in format 'YYYY-MM-DD'."
    date: String!
    type: String!
}

"Date-time"
type AttributeDateTime {
    "The DateTime Attribute dateTimeLocal"
    dateTimeLocal: String
    "The DateTime Attribute dateTimeUTC"
    dateTimeUTC: String!
    "The DateTime Attribute dateTimeLocal"
    isDateOnly: Boolean
    "The DateTime Attribute targetTimezone"
    targetTimezone: String
    type: String!
}

"Create a list / numbered list of text blocks"
type AttributeEnumeration {
    "The enumerationType in the enumeration."
    enumerationType: Enumerations!
    "The items in the enumeration."
    items: [EnumerationItem]!
    type: String!
}

"Fact"
type AttributeFact {
    "The fact, e.g. for \"favourite ice cream\" this could be set to \"Vanilla\"."
    fact: AttributeTextualArtefactContainer!
    "Fact label, e.g. \"Favourite ice cream\"."
    factAbout: AttributeText!
    type: String!
}

"Stores multiple key-value pairs e.g. to store theming configuration"
type AttributeKeyValue {
    "Stores multiple key-value pairs e.g. to store theming configuration"
    elements(
        "Only return values for specified keys"
        keys: [String]
    ): [KeyValue_Item]
    type: String!
}

"Location data"
type AttributeLocation {
    "A textual name of the City."
    city: String
    "Two letter country code according to ISO-3166-1 alpha-2 standard"
    countryCode: String!
    "A textual name of the country, e.g. Austria, Germany"
    countryName: String
    "Formatted textual address"
    formattedAddress: String
    "The geo-coordinates for the location"
    geoLocation: GeoLocation
    "The postal code for the location"
    postalCode: String
    precision: String
    state: String
    "The short code of a state, e.g. NY for NewYork"
    stateCode: String
    type: String!
}

"A paragraph stores text-block, other embedded content resources (such as videos, image-galleries, etc.) or services"
type AttributeParagraph {
    contents: [ParagraphUnion]!
    title: String
    type: String!
}

"A paragraph container holds multiple paragraphs. This can be used to store content for a story body"
type AttributeParagraphContainer {
    "The Paragraph Container Attribute Contents"
    contents: [AttributeParagraph!]!
    type: String!
}

"Repeat words from a text or speech written or spoken by another person"
type AttributeQuote {
    "Quote author."
    author: QuoteAuthor
    "The quoted text."
    quoteText: AttributeTextualArtefactContainer!
    type: String!
}

"Link to another content resource"
type AttributeReferenceLink {
    markup: [String]
    reference: ContentResource
    text: String!
    type: String!
}

"Add inline related content with or without a label for the container"
type AttributeRelatedContentContainer {
    contents: [RelatedContentContainerUnion!]!
    label: String
    type: String!
}

"Add a sub-page (editorial container)"
type AttributeSubPage {
    label: String!
    subPage: EventDetail!
    type: String!
}

"Add a textual table with rows and columns"
type AttributeTable {
    "Table caption."
    caption: AttributeText
    "Table cells."
    cells: [AttributesTableCell]
    "Table columns."
    columns: [AttributesTableColumn]
    type: String!
}

"A text attribute"
type AttributeText {
    "The optional Text Attribute markup"
    markup: [String]
    "The Text Attribute text"
    text: String!
    type: String!
}

"A textual artefact containting text, external links, links to resources, etc."
type AttributeTextualArtefactContainer {
    "The TextualArtefactContainer Attribute contents"
    contents: [TextualArtefactContainerUnion]
    type: String!
}

"Add a time-table e.g. for an event"
type AttributeTimeTable {
    type: String!
}

"Track record"
type AttributeTrackRecord {
    "List of achieved records."
    records: [TrackRecordRecords]!
    type: String!
}

"Link to another website"
type AttributeWebLink {
    "The Web Link Attribute href"
    href: String!
    "True if the href was automatically generated and not editorially set"
    isGenerated: Boolean
    "The optional Web Link Attribute markup"
    markup: [String]
    "The Web Link Attribute text"
    text: String!
    type: String!
}

"Store a year"
type AttributeYear {
    type: String!
    "Calendar year."
    year: Int!
}

type AttributesTableCell {
    cellContent: TableRowUnion!
    column: AttributesTableColumn
    row: AttributesTableRow
}

type AttributesTableColumn {
    "Column ID from 0=first to n=last column."
    colId: Int!
    "The column title / label."
    title: AttributeText
}

type AttributesTableRow {
    "Row ID, from 0=first to n=last row in table."
    rowId: Int!
}

"An episode of an audio series (either a podcast series or a radio show)"
type AudioEpisode implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The episode number of this episode (e.g. `1`)"
    episodeNumber: Int
    "Reference to audio source"
    essence: AbstractService
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "A list of persons who are hosting the episode"
    hosts: [AttributeText]
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The season the episode belongs to"
    season(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): AudioSeason
    "The season number of this episode (e.g. `1`). This field is inherited from the season attached through the `season` relationship"
    seasonNumber: Int
    "Reference to services like Apple Podcast or Google Podcast"
    socialBuzz: AbstractService
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    "Textual representation of the audio file"
    transcript: AttributeParagraphContainer
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Subgroup of connected podcast or radio episodes related to an audio series"
type AudioSeason implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "All episodes of the season"
    episodes(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [AudioEpisode]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The numerical season number (used for sorting on season)"
    seasonNumber: Int
    "The series the season belongs to"
    series(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): AudioSeries
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Connected set of podcast or radio episodes"
type AudioSeries implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Keep the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    episodes(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [AudioEpisode]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "A list of persons who are hosting the series"
    hosts: [AttributeText]
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    language: AttributeText
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    preview(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): AudioEpisode
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    seasons(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [AudioSeason]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    subType: String
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Follow an artist / a group on bandsintown"
type Bandsintown implements AbstractService {
    "e.g. 14627533 for https://www.bandsintown.com/a/14627533"
    artistId: Int!
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
}

type BrightcoveVRVideo implements AbstractService {
    allowEmbedding: Boolean!
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    refId: String!
    type: String!
}

type BrightcoveVideo implements AbstractService {
    "Brightcove account id"
    accountId: Int!
    allowEmbedding: Boolean!
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "Brightcove video-player id"
    playerId: String!
    refId: String!
    type: String!
}

type CloudinaryImage implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The cloudinary URL to the image. Replace the '{op}' placeholder with the desired cloudinary image transformation parameters"
    imageURL: String!
    "Predominant color of the image. Can be used to calculate complementary color."
    predominantColor: String
    type: String!
}

"A product commercial of RedBull, e.g. a link to a RedBull cartoons clip."
type Commercial implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "The URL to the external resource"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"A content collection aggregates content based on tags content was tagged with."
type ContentCollection implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    "If set to true, content-collection will be automatically assigned to all content resources which match the tag-selection criteria (includeContentTaggedWith-excludeContentTaggedWith). The content collection is assigned through the relationship `contentCollections` on content resources. Assigned content collections are shown through labels on cards / content pages and allow for navigating back to the collection itself."
    autoAssign: Boolean
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "Editorial collections are populated manually with content through the featuring-app"
    editorial: Boolean @deprecated(reason : "Editorial collections will be moved to playlist and editorial-list type.")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content tagged with these tags or it's children will be excluded from the content collection."
    excludeContentTaggedWith(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "If content is tagged with these tags or its children will be inlcuded in the content collection."
    includeContentTaggedWith(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    label: String
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "List of tags through which content is assigned to this content collection. Content tagged with any of these tags will become a member of the content collection. This relationship is calculated automatically and will contain the tags and children-tags of includeContentTaggedWith. All tags and children-tags of excludeContentTaggedWith will be subtracted."
    mappedTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Groups content collections into sub categories, e.g. collections for disciplines, mindsets, etc."
    subType: String
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

type ContentResourceEdge {
    cursor: String!
    node: ContentResource
}

"System metadata about content resources"
type ContentResourceMetaData {
    createdBy: String!
    dateCreated: String!
    dateUpdated: String!
    "Alternative keys for a resource, e.g. if a resources got imported automatically from another system or links to an asset from another system"
    foreignKeys: [String]
    language: String!
    locale: String!
    "Draft asset if not set. Published asset if set to true. Unpublished asset if set to false"
    published: Boolean
    region: String!
    spaces: [String]
    updatedBy: String!
}

"An editorial collection content resources for a given topic"
type EditorialList implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

type EnumerationItem {
    item: AttributeTextualArtefactContainer
    label: String
}

"An episode of a show"
type EpisodeVideo implements ContentResource & VideoResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The episode number of this episode (e.g. `1`)"
    episodeNumber: Int
    "All extras such as videos or trailer-videos for an episode-video. Set automatically as bi-directional relationship."
    extras(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "If `true` video is currently playable, if `false` video may be shown but cannot be played (e.g. episode is only teased)"
    isPlayable: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    "If set to true, embedding should not be offered for this asset. Used for exclusive content that should only live on redbull.com"
    noEmbedding: Boolean
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    "The playability end date from which an asset should no longer be playable (if missing, the asset is playable open end)"
    playabilityEnd: AttributeDateTime
    "The playability start date from which an asset becomes playable. (If missing the asset as playable)"
    playabilityStart: AttributeDateTime
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The season the episode belongs to. If not set, episode is not structured into seasons."
    season(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): Season
    "The season number of this episode (e.g. `1`). This field is inherited from the seaon attached through the `season` relationship"
    seasonNumber: Int
    "The partner who sponsored the creation of a content piece (financial or other support)"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Available subtitle-languages for the video asset in [RFC 5646](https://tools.ietf.org/html/rfc5646) notation. E.g. \"en\", \"en-US\", etc."
    subtitleLanguages: [String]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
    videoDurationSeconds: Int
    "Reference to video archive for playback (e.g. mediabase RBMN API)"
    videoEssence: AbstractService
    "Aspect ratio of the video-frame (width / height)"
    videoFrameAspectRatio: Float
}

"Embed an EventBrite checkout form"
type EventBriteCheckout implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The ID of an EventBrite Event"
    eventId: String!
    type: String!
}

"Used to store details about events (e.g. press and media information, FAQ, event-rules)"
type EventDetail implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    body: AttributeParagraphContainer
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"An event-profile hightlights an event"
type EventProfile implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "End date & time of an event"
    endDate: AttributeDateTime
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    eventDescription: [AttributeTextualArtefactContainer] @deprecated(reason : "warn")
    "A list of paragraphs containing detail information about an event (e.g. FAQ, venue info, etc.)"
    eventDetails: AttributeParagraphContainer @deprecated(reason : "no-write")
    "An time-table for a single event"
    eventTimeTable: AttributeTimeTable
    "Add an external provider for a content piece (e.g. a micorsite offering a specialized experience)"
    externalServiceLinks: [AbstractService]
    "All extras for an event-profile such as video-clips, trailers or recaps. Set automatically as bi-directional relationship."
    extras(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    isHostedByRedBull: Boolean
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "The (short) label for an event-profile if shown together with the season or series. E.g. \"Lenzerheide, Switzerland\" for an event-profile which is part of the event-season \"UCI MTB World Championships 2018\""
    label: String
    "RB2 content ID."
    legacyContentId: String
    "An editorially ordered list of all live-streams available for this event."
    live(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [LiveVideo]
    "Primary live stream (also included in `live`), set in the LiveOps tool"
    livePrimary(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): LiveVideo
    "The live status of the event across all attached live-streams. Only available if an event is actually live-streamd (through live-videos attached in live relationship)"
    liveStatus: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    "Athletes or artists participating at an event"
    participatingPersons(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PersonProfile]
    "Teams participating at an event"
    participatingTeams(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [GroupProfile]
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pressAndMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): EventDetail
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "id of a RBTV live stream"
    rbtvLiveStreamId: String
    recap(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [RecapVideo]
    "A set of related content containers for highlighting content about an event (e.g. history, top videos, etc.)"
    relatedContentContainers: [AttributeRelatedContentContainer]
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    results(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): EventDetail
    rules(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): EventDetail
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The event-season an event-profile belongs to."
    season(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): EventSeason
    "The event series an event-profile belongs to. Relationship is set automatically from series attached to season if left black."
    series(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): EventSeries
    "Reference to service like Wayin to fetch social buzz about an event"
    socialBuzz: AbstractService
    "Official sponsor(s) of an event"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Start date and time of an event"
    startDate: AttributeDateTime
    "A canceled event will not take place at all A confirmed event will take place on the date shown on the event A postponed event still has the original date shown and the new event date is undecided A rescheduled event has a new date decided and shown on the event An unconfirmed event does not have a decided date. No date is shown on the event"
    status: String
    "If provided the message is displayed next to the status and is supposed to provide additional information (e.g. Postponed due to bad weather. More details coming soon.)"
    statusMessage: String
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Attach multiple subpages (e.g. for adding rules, press-and-media, etc.)"
    subPages: [AttributeSubPage]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"An event season. (e.g. UCI MTB Worldcup 2018)"
type EventSeason implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual season information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "All events of the season"
    events(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [EventProfile]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "The label of the season, e.g. `2018`. Shown on tabs."
    label: String
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The numerical season number (used for sorting) E.g. `2018`"
    seasonNumber: Int
    "The event-series the event-season belongs to."
    series(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): EventSeries
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"An event-series groups a list of event-poriles"
type EventSeries implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual information about an event-series. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise as it may be shown as a stand-first (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "End date & time of an event-series"
    endDate: AttributeDateTime
    "All event-profiles (single events) of this event-series. Set automatically as bi-directional relationship."
    events(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [EventProfile]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "All event-seasons of this event-series if series is structured into multiple seasons. Set automatically as bi-directional relationship."
    seasons(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [EventSeason]
    "Reference to service like Wayin to fetch social buzz about an event-series"
    socialBuzz: AbstractService
    "Start date and time of an event-series"
    startDate: AttributeDateTime
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Attach multiple subpages (e.g. for adding rules, press-and-media, etc.)"
    subPages: [AttributeSubPage]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    "Timeline for an event-series, e.g. to capture historical milestones"
    trackRecord: AttributeTrackRecord
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"A reference to a content resource not stored in the content repo. Has a fully qualified URL instead of an uriSlug"
type ExternalContent implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "The URL to the external resource"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Add a facebook profile, event or page to follow"
type FacebookFollow implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "What is the facebook enitity type behind the follow URL"
    facebookEntityType: String!
    "e.g. https://www.facebook.com/redbull/"
    href: String!
    type: String!
}

"Embed a facebook post"
type FacebookPost implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    facebookEntityType: String!
    "URL of Facebook post to embed. See https://developers.facebook.com/docs/plugins/embedded-posts#how-to-get-a-posts-url"
    href: String!
    type: String!
}

type FeedFieldCounts {
    "Document count by content collection."
    contentCollections: [FeedFieldKeyCount]
    "Document count by country code."
    locationCountryCode: [FeedFieldKeyCount]
    "Document count by space."
    meta_spaces: [FeedFieldKeyCount]
    "Document count by type."
    type: [FeedFieldKeyCount]
}

type FeedFieldKeyCount {
    count: Int
    key: String
    resource: ContentCollection
}

"A film"
type Film implements ContentResource & VideoResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "All extras for a video such as video-clips or trailers. Set automatically as bi-directional relationship."
    extras(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "If `true` video is currently playable, if `false` video may be shown but cannot be played (e.g. film is only teased)"
    isPlayable: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    "If set to true, embedding should not be offered for this asset. Used for exclusive content that should only live on redbull.com"
    noEmbedding: Boolean
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    "The playability end date from which an asset should no longer be playable (if missing, the asset is playable open end)"
    playabilityEnd: AttributeDateTime
    "The playability start date from which an asset becomes playable. (If missing the asset as playable)"
    playabilityStart: AttributeDateTime
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The partner who sponsored the creation of a content piece (financial or other support)"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Available subtitle-languages for the video asset in [RFC 5646](https://tools.ietf.org/html/rfc5646) notation. E.g. \"en\", \"en-US\", etc."
    subtitleLanguages: [String]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
    "Legth of the film in seconds. May not be set if the film is not yet playable / available."
    videoDurationSeconds: Int
    "Reference to media asset delivery system for the video-file. May be not available if a film is only featured but not playable."
    videoEssence: AbstractService
    "Aspect ratio of the video-frame (width / height)"
    videoFrameAspectRatio: Float
}

"A link to a game microsite, e.g. a RedBull cartoons game."
type Games implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "The URL to the external resource"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

type GeoLocation {
    lat: Float!
    long: Float!
    metresAboveSeaLevel: Float
}

"Embed a video clip from Giphy"
type Giphy implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The Giphy ID (e.g. feqkVgjJpYtjy)"
    id: String!
    type: String!
}

"A profile for a group of person-profiles (e.g. band or a team)"
type GroupProfile implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Several facts about the group (e.g. motto)"
    facts: [AttributeFact]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    isSponsored: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "My relationship description"
    members(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PersonProfile]
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    socialBuzz: AbstractService
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Group-profiles can be differentiated between bands and teams (in sports)"
    subType: String
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackRecord: AttributeTrackRecord
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Highlighted teaser and title"
type HighlightObject {
    teaser: [String]
    title: [String]
}

"An image resource"
type Image implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    imageEssence: AbstractService
    "If set to true, the image itself has the title of the image burned in. Used e.g. for logos that sometimes have the title of the logo in the logo itself."
    imageEssenceContainsCaption: Boolean
    "Get the image URL for an image in the correct size"
    imageSrc(aspectRatio: Float, height: Int = 100, mode: ImageModes, width: Int = 150): String
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    subType: String
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Image galleries group a list of images into one slideshow"
type ImageGallery implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Images of the image gallery"
    images(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Embed an instagram post"
type InstagramEmbed implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    hideCaption: Boolean!
    "URL of Instagram post. Open an image on instagram and copy the URL from your browser."
    href: String!
    type: String!
}

"Add an instagram follow button"
type InstagramFollow implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "e.g. 'https://www.instagram.com/redbull/'"
    href: String!
    type: String!
}

"Add a form from JotForm"
type JotForm implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "JotForm ID (e.g. 80421851676358)"
    jotFormId: String!
    type: String!
}

type KeyValue_Item {
    "A key, which is a unique identifier for the corresponding data"
    key: String
    "A value, which holds the data"
    value: KeyValue_ValueUnion
}

"Embed quizzes / forms from Kontest"
type Kontest implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
    "Kontest embed url"
    url: String!
}

"A live video-stream"
type LiveVideo implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The planned end-date of the stream"
    endDate: AttributeDateTime
    "All events in which this live-stream is referenced through the live relationship."
    events(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [EventProfile]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "Used to identify which live-stream to highlight if multiple live-streams are available (e.g. for an event) Used for the header section of an live-streamed event-profile (only one can be shown, but multiple streams might be attached to the event-profile) Throughout the life of an live-streamed event, the primary live stream may change multiple times."
    isPrimary: Boolean @deprecated(reason : "This flag is deprecated in favor of relations on event-profiles")
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The start date/time of the livestream"
    startDate: AttributeDateTime
    "The status of the stream."
    status: String
    "An editorially set status label which should be used instead of the status enum if set. Used e.g. to indicate that a stream is `broadcasted` (fake-live)."
    statusLabel: String
    "An editorially set status message for the status of the live stream (e.g. `waiting for the swell` or `delayed due to weather conditions`)"
    statusMessage: String
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
    "Duration of the live video stream if the stream is already over."
    videoDurationSeconds: Int
    "Reference to an asset in the media asset management system (e.g. Mediabase RBMN API)"
    videoEssence: AbstractService
    "Aspect ratio of the video-frame (width / height)"
    videoFrameAspectRatio: Float
}

type Locale {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    "The primary web URL for this locale."
    baseWebURL: String
    "The id of the resource"
    id: ID!
    "The language of the locale"
    language: String
    "The locale in the format la-REG (e.g.: \"en-US\")"
    locale: String!
    "The locales from which content is fetched. First element is primary locale, remaining locales are used to fill up feed."
    localeMixingStrategy: [String]
    "The region (e.g. \"US\" or \"MEA\")"
    region: String!
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    trackingDimensions: JSON
    "The type of the resource"
    type: String!
}

"A location stores information about an event-locaiton or a venue"
type Location implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    "The location data"
    location: AttributeLocation
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    socialBuzz: AbstractService
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Mediabase delivery agent for video preview clips"
type MediabaseDeliveryAgentClips implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
}

"Mediabase delivery agent for images"
type MediabaseDeliveryAgentImage implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
}

"Embed a mixcloud track"
type MixcloudAudio implements AbstractService {
    assetType: String
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The URL of a mixcloud track"
    href: String!
    type: String!
}

"Embed a video or live-stream from Mixer"
type MixerVideo implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
    "Mixer Embed URL"
    url: String!
}

type PageInfo {
    hasNextPage: Boolean
}

"A profile of a partner, e.g. an event sponsor or team sponsor"
type PartnerProfile implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "URL to the partners website"
    href: AttributeWebLink
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Stores information about an athlete or artist"
type PersonProfile implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    "A biography of an athlete or person. The first textual-artefact-container may be rendered as stand first."
    biography: [AttributeTextualArtefactContainer]
    birthDate: AttributeDate
    callToActions: [AttributeCallToAction]
    "The year in which the athlete started his/her career."
    careerStart: AttributeYear
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "Sport or culture disciplines the athlete / artist focus on. E.g. 'free climbing', 'BMX flatland', 'fighting games'"
    disciplines: [String]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Several facts about the athlete (label / fact)"
    facts: [AttributeFact]
    familyName: String
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    gender: String
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    givenName: String
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    isSponsored: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    nickName: String
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    "A quote from the person regarding Red Bull products. E.g. \"I drink Red Bull right after the race to keep the energy up\""
    productRelatedQuote: AttributeText
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "A favourite quote from the person. E.g. \"I give 100% ... day and night.\""
    quote: AttributeText
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    socialBuzz: AbstractService
    "A list of random facts about the athlete"
    softFacts: AttributeEnumeration
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    subType: String
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackRecord: AttributeTrackRecord
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Embed a pixlee social embed to embed e.g. instagram walls"
type PixleeEmbed implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
    widgetId: String!
}

"Add a playbuzz game"
type PlaybuzzGame implements AbstractService {
    "Playbuzz API key for analytics & data collection (e.g. '8c8bdd3d-b176-4450-9a73-d14bb8afddcb')"
    apiKey: String
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "If true the game information (thumbnail, name, description and editor) should be shown"
    showGameInfo: Boolean
    type: String!
    "Playbuzz game URL (e.g. http://playbuzz.com/miaclark11/which-takeaway-do-you-deserve-based-on-how-your-days-been)"
    url: String!
}

"An editorial collection of videos for playback"
type Playlist implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"A short preview clip (e.g. giphy / mp4)"
type PreviewClip implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "The reference to the preview-clip delivery service"
    clipEssence: AbstractService
    "Get the video URL for a preview clip in the correct size"
    clipSrc(height: Int = 100, width: Int = 150): String
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Ongoing content projects without a specific location / start and end-date. (e.g. kaleidoscope)"
type ProjectProfile implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    "Athletes or artists participating in a project"
    participatingPersons(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PersonProfile]
    "Teams participating in a project"
    participatingTeams(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [GroupProfile]
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    relatedContentContainers: [AttributeRelatedContentContainer]
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    socialBuzz: AbstractService
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Attach multiple subpages (e.g. for adding rules, press-and-media, etc.)"
    subPages: [AttributeSubPage]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Query"
type Query {
    "Iterate through all resources of a given type"
    allResourcesOfType(
        after: String,
        first: Int = 20,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "List of spaces from which content should be returned."
        spaces: [String] = ["redbull_com", "rbtv", "redbullmusic"],
        "The type from which resources should be fetched. E.g. `stories`, `event-profiles`, .."
        type: String!
    ): AllResourcesOfTypeConnection @deprecated(reason : "Experimental feature")
    "Fetch a feed of content resources by using a query or a redbull.com URL"
    feed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Disable usage restrictions like no-standalone-display or geo-blocking"
        disableUsageRestrictions: Boolean,
        "Disable removal of geo-blocked assets based on the primary locale."
        enforceGeoBlocking: Boolean = true,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Specify the locales of content resources for elements in the feed. The locale-mixing strategy is applied in order, hence, content resources available in multiple locales will only be returned in one locale (the first one locale in the locale-mixing strategy will win)"
        localeMixing: [String],
        "Specify a search term for fulltext-search."
        q: String,
        "Feed API query string (e.g. \"/v2/feed/en-INT?filter[type]=stories\") which can be used instead of the feed arguments. If this argument is provided, other feed arguments will be ignored"
        query: String,
        "Will only return resources that are related to the given context resource."
        relatedTo: String,
        "Specify the context object(s) for the scoring function"
        score: FeaturingRecordForScoringFunction,
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "Comma separated list of properties by which to sort the results"
        sort: [FeedSort],
        "List of spaces from which content should be returned. By default spaces redbull_com, rbtv, redbullmusic are selected."
        spaces: [String],
        url: String
    ): QueryFeedConnection
    "Get locales"
    locales(
        "Add filter for filtering on locale, language or region"
        filter: LocalesFilter
    ): [Locale]
    "Get a content-resource by id"
    resource(
        "Disable removal of geo-blocked assets based on the primary locale."
        enforceGeoBlocking: Boolean = true,
        id: String!,
        includeDraft: Boolean,
        includeUnpublished: Boolean,
        "Specify the locales of content resources for elements in the feed. The locale-mixing strategy is applied in order, hence, content resources available in multiple locales will only be returned in one locale (the first one locale in the locale-mixing strategy will win)"
        localeMixing: [String]
    ): ContentResource
    "Get a list of content-resources by id"
    resources(
        "Disable removal of geo-blocked assets based on the primary locale."
        enforceGeoBlocking: Boolean = true,
        ids: [String!]!,
        includeDraft: Boolean,
        includeUnpublished: Boolean,
        "Specify the locales of content resources for elements in the feed. The locale-mixing strategy is applied in order, hence, content resources available in multiple locales will only be returned in one locale (the first one locale in the locale-mixing strategy will win)"
        localeMixing: [String]
    ): [ContentResource]
    "Fulltext searches on the content-pool."
    search(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned. By default the first 20 resources will be returned."
        first: Int = 20,
        "Specify the locales of content resources for elements in the feed. The locale-mixing strategy is applied in order, hence, content resources available in multiple locales will only be returned in one locale (the first one locale in the locale-mixing strategy will win)"
        localeMixing: [String],
        "Search query."
        q: String!,
        "List of spaces from which content should be returned."
        spaces: [String] = ["redbull_com", "rbtv", "redbullmusic"]
    ): SearchFeedConnection
}

type QueryFeedConnection {
    edges: [ContentResourceEdge]
    "Get document counts by type or by space for a feed."
    fieldCounts: FeedFieldCounts
    pageInfo: PageInfo
    totalCount: Int
}

"Embed quizzes from Qzzr"
type QzzrQuiz implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "Qzzr Quiz-id (data-quiz element in embed code)"
    id: String!
    type: String!
}

"Add a RBMA radio embed"
type RBMARadio implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
    "RBMA URL (https://www.rbmaradio.com/shows/fireside-chat/episodes/danny-brown/embed)"
    url: String!
}

"RBMN Live Stream Asset"
type RBMNLive implements AbstractService {
    "Video identification number from mediabase Media Network Content Hub catalogue (e.g. MI201802070142)"
    VIN: String!
    "AA ID of a mediabase asset"
    assetId: String
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The chapter according to the LSC tree"
    chapter: String
    "Geo-locations referenced with the video-clip"
    geoLocations: [String]
    "The iTunes ID for a video asset"
    iTunesId: String
    "The label according to the LSC tree"
    label: String
    "The main characters of the video asset"
    mainCharacters: [String]
    "The maturity rating of a video asset according to MPAA rating scheme"
    maturityRating: String
    "On which mediabase environment is the asset available (if not set, production is assumed)"
    mbEnvironment: String
    "Type of the media asset"
    mediaAssetType: [String]
    "Persons appearing in a video-clip"
    persons: [String]
    "RBMN API Resource (mp4, keyframes, hls)"
    resources: [RBMNVideo_Resource]
    "Playability and visibility dates set for this resource"
    scheduleLifecycle: RBMNVideo_ScheduleLifecycle
    "The season according to the LSC tree"
    season: String
    "Supporting roles in the video"
    supportingRole: [String]
    type: String!
    "The year the video has been produced"
    yearOfProduction: String
}

"Video served through the RedBull media network API (mediabse / rbmn-ffm.rbmbtnx.net)"
type RBMNVideo implements AbstractService {
    VIN: String!
    "AA ID of a mediabase asset"
    assetId: String
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The chapter according to the LSC tree"
    chapter: String
    "Geo-locations referenced with the video-clip"
    geoLocations: [String]
    hideCornerLogo: Boolean
    "The iTunes ID for a video asset"
    iTunesId: String
    "The label according to the LSC tree"
    label: String
    "The main characters of the video asset"
    mainCharacters: [String]
    "The maturity rating of a video asset according to MPAA rating scheme"
    maturityRating: String
    "On which mediabase environment is the asset available (if not set, production is assumed)"
    mbEnvironment: String
    "Type of the media asset"
    mediaAssetType: [String]
    "Persons appearing in a video-clip"
    persons: [String]
    "The year the video has been released"
    releaseDate: String
    "RBMN API Resource (mp4, keyframes, hls)"
    resources(
        "Filter resources by type. (e.g. sprites)"
        filter: ResourceTypeFilter
    ): [RBMNVideo_Resource]
    "Playability and visibility dates set for this resource"
    scheduleLifecycle: RBMNVideo_ScheduleLifecycle
    "The season according to the LSC tree"
    season: String
    "Supporting roles in the video"
    supportingRole: [String]
    type: String!
    "The year the video has been produced"
    yearOfProduction: String
}

type RBMNVideo_Resource_Image implements RBMNVideo_Resource {
    "Pixel height of the image"
    height: Int
    "MIME type of the resource"
    mimeType: String
    "Mediabase resource type"
    resourceType: String
    "Resource URL"
    url: String
    "Pixel width of the image"
    width: Int
}

type RBMNVideo_Resource_MP4 implements RBMNVideo_Resource {
    "Duration of the MP4 in milliseconds"
    duration: Int
    "Pixel height of the MP4 video"
    height: Int
    "MIME type of the resource"
    mimeType: String
    "Mediabase resource type"
    resourceType: String
    "Resource URL"
    url: String
    "Pixel width of the MP4 video"
    width: Int
}

type RBMNVideo_Resource_Sprite implements RBMNVideo_Resource {
    "Duration of the sprite in milliseconds"
    duration: Int
    "MIME type of the resource"
    mimeType: String
    "Mediabase resource type"
    resourceType: String
    "Resource URL"
    url: String
}

type RBMNVideo_Resource_Subtitle implements RBMNVideo_Resource {
    "Locale / language of the subtitle file"
    locale: String
    "MIME type of the resource"
    mimeType: String
    "Mediabase resource type"
    resourceType: String
    "Resource URL"
    url: String
}

type RBMNVideo_ScheduleLifecycle {
    "An asset may be shown (e.g. feature) but should not be playable after this timestamp"
    playabilityEnd: String
    "An asset can be shown but should not be playable before this timestamp"
    playabilityStart: String
    "An asset should no longer be visible after this point in time"
    visibilityEnd: String
    "Earliest point in time an asset should be visible"
    visibilityStart: String
}

"Recap videos for events"
type RecapVideo implements ContentResource & VideoResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    extraFor(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [EventProfile]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    "If set to true, embedding should not be offered for this asset. Used for exclusive content that should only live on redbull.com"
    noEmbedding: Boolean
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The partner who sponsored the creation of a content piece (financial or other support)"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Available subtitle-languages for the video asset in [RFC 5646](https://tools.ietf.org/html/rfc5646) notation. E.g. \"en\", \"en-US\", etc."
    subtitleLanguages: [String]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
    videoDurationSeconds: Int
    "Reference to video archive for playback (e.g. mediabase RBMN API)"
    videoEssence: AbstractService
    "Aspect ratio of the video-frame (width / height)"
    videoFrameAspectRatio: Float
}

type RedBullImageserverImage implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    extension: String!
    mimeType: String!
    "The imageserver path with {op} placeholder for image server commands"
    templateURL: String!
    type: String!
}

"Links to a redbull event fetched from MEPP connect"
type RedBullMeppEvent implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "Reference to event in MEPPconnect"
    meppId: String!
    subtype: String!
    type: String!
}

"DEPRECATED! Use rb-mepp-events service instead."
type RedBullMusicEvent implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "Backastage event ID of a redbull music event"
    backstageId: String
    "Event id in central event and artist database"
    centralEventArtistDbId: String
    type: String!
}

type RedBullTVLinearStream implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "Stream ID (e.g. bike)"
    streamId: String!
    type: String!
}

type RedBullTVLiveVideostream implements AbstractService {
    "Video identification number from MIT mediabase asset catalogue (e.g. MI201802070142)"
    VIN: String
    "AA ID of a mediabase asset"
    assetId: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The chapter according to the LSC tree"
    chapter: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "Geo-locations referenced with the video-clip"
    geoLocations: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The iTunes ID for a video asset"
    iTunesId: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The label according to the LSC tree"
    label: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The main characters of the video asset"
    mainCharacters: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The maturity rating of a video asset according to MPAA rating scheme"
    maturityRating: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "On which mediabase environment is the asset available (if not set, production is assumed)"
    mbEnvironment: String
    "Type of the media asset"
    mediaAssetType: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "Persons appearing in a video-clip"
    persons: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The season according to the LSC tree"
    season: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "Supporting roles in the video"
    supportingRole: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    type: String!
    "Video product ID from MIT aggregation API (e.g. AP-1M8YSM1M51W11)"
    videoId: String!
}

type RedBullTVVideo implements AbstractService {
    "Video identification number from MIT mediabase asset catalogue (e.g. MI201802070142)"
    VIN: String
    "AA ID of a mediabase asset"
    assetId: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The chapter according to the LSC tree"
    chapter: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "Geo-locations referenced with the video-clip"
    geoLocations: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The iTunes ID for a video asset"
    iTunesId: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The label according to the LSC tree"
    label: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The main characters of the video asset"
    mainCharacters: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The maturity rating of a video asset according to MPAA rating scheme"
    maturityRating: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "On which mediabase environment is the asset available (if not set, production is assumed)"
    mbEnvironment: String
    "Type of the media asset"
    mediaAssetType: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "Persons appearing in a video-clip"
    persons: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "The season according to the LSC tree"
    season: String @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    "Supporting roles in the video"
    supportingRole: [String] @deprecated(reason : "The Agg API is no longer available as the 'https://rbtv.rbmbtnx.net' endpoint has been removed.")
    type: String!
    "Video product ID from MIT aggregation API (e.g. AP-1M8YSM1M51W11)"
    videoId: String!
}

"Used to embed quizzes and polls"
type RiddleEmbed implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    id: String!
    type: String!
}

type SearchFeedConnection {
    edges: [SearchResourceEdge]
    pageInfo: PageInfo
    totalCount: Int
}

type SearchNode {
    highlight: HighlightObject
    id: String!
    resource: ContentResource
    teaser: String
    title: String
    type: String!
}

type SearchResourceEdge {
    cursor: String!
    node: SearchNode
}

"A season of a show"
type Season implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual season information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "All episodes of the season"
    episodes(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [EpisodeVideo]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "The label of the season, e.g. Season 1"
    label: String
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The numerical season number (used for sorting on season)"
    seasonNumber: Int
    "The show the season belongs to"
    show(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): Show
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"A show"
type Show implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information.^ Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    episodes(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [EpisodeVideo]
    "All extra videos for a show. Set automatically as bi-directional relationship."
    extras(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    seasons(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Season]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Adds a button to add people on snapchat"
type Snapchat implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "e.g. 'https://www.snapchat.com/add/redbull/'"
    href: String!
    type: String!
}

"Follow an artist on songkick"
type SongkickFollow implements AbstractService {
    "e.g. '182968' for https://www.songkick.com/artists/182968-eminem"
    artistId: Int!
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    type: String!
}

"Embed a soundcloud track or playlist"
type SoundcloudAudio implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The ID of a Soundcloud track or playlist"
    id: Int!
    "Needed for embedding of private soundcloud assets"
    secretToken: String
    soundcloudEntityType: String!
    type: String!
}

"Add a soundcloud link to artists or playlists"
type SoundcloudSocialLink implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "e.g. 'https://soundcloud.com/stephenvantran'"
    href: String!
    type: String!
}

"Add a spotify play button"
type Spotify implements AbstractService {
    assetType: String
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "Spotify content identifier"
    embedId: String
    "Spotify URL (https://play.spotify.com/track/0ZSdQvYFSY7BNjJEB6t0P3)"
    href: String
    type: String!
    "A spotify URI, e.g. spotify:artist:5lsC3H1vh9YSRQckyGv0Up"
    uri: String
}

"Spreaker audio resource (podcast episode or sho"
type SpreakerAudio implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    resourceType: String!
    "The ID of a spreaker resource"
    spreakerId: String!
    type: String!
}

type Story implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    body: AttributeParagraphContainer
    callToActions: [AttributeCallToAction]
    contentCategory: [String]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The partner who sponsored the creation of this story (financial or other support)"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    subType: String @deprecated(reason : "warn")
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

type Tag implements ContentResource {
    alternativeLabels: [String]
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    broaderTag(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): Tag
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    hiddenLabels: [String]
    "The id of the resource"
    id: ID!
    isDisplayTag: Boolean @deprecated(reason : "DisplayTags are replaced by content-collections. This flag will no longer be populated. For further details check out http://bit.ly/2F9w93H")
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    label: String
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    mediaBaseTaxonomyReference: String
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    sportsNetId: String
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    subType: String
    "Enumeration of all tags from broaderTag (first element) to root tag (last element)"
    tagHierarchy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
}

"Embed an image from a Thing"
type ThingImage implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "Thing image"
    imageId: String!
    type: String!
}

type TrackRecordRecords {
    "Time when the record was achieved."
    dateTime: AttributeYear
    "Some additional description about the record, e.g. 'Fastest female biker, 8th on Stage 4, 5th on Stage 8'"
    description: AttributeTextualArtefactContainer
    location: AttributeText
    "The record that was achieved, e.g. '1st Place: Island House Invitational Triathlon'"
    record: AttributeText!
}

"A trailer video clip"
type TrailerVideo implements ContentResource & VideoResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    extraFor(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    "If set to true, embedding should not be offered for this asset. Used for exclusive content that should only live on redbull.com"
    noEmbedding: Boolean
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The partner who sponsored the creation of a content piece (financial or other support)"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Available subtitle-languages for the video asset in [RFC 5646](https://tools.ietf.org/html/rfc5646) notation. E.g. \"en\", \"en-US\", etc."
    subtitleLanguages: [String]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
    videoDurationSeconds: Int
    "Reference to video archive for playback (e.g. mediabase RBMN API)"
    videoEssence: AbstractService
    "Aspect ratio of the video-frame (width / height)"
    videoFrameAspectRatio: Float
}

"Embed a Twitch chat"
type TwitchChat implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "A twitch channel name (e.g. 'kraken')"
    channelName: String!
    type: String!
}

"Embed a live video from Twitch"
type TwitchLiveVideo implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "A twitch channel name (e.g. 'kraken')"
    channelName: String
    "Twitch clip id (e.g. 'eleaguetv/ZealousMosquitoPeteZarollTie')"
    clipId: String
    type: String!
    "Twitch video id (e.g. 'c6055863')"
    videoId: String
}

"Add a twitter follow button"
type TwitterFollow implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "e.g. '@redbull'"
    twitterUser: String!
    type: String!
}

"Embed a twitter tweet"
type TwitterTweetEmbed implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    hideCards: Boolean!
    hideConversation: Boolean!
    " The tweet id can be obtained by clicking on the date of a tweet, the last path fragment of the url in the browser address bar is the id. (e.g. 560070183650213889)"
    tweetId: String!
    type: String!
    widgetType: String!
}

"Embed a VK post"
type VKPost implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "vk.com hash for the widget connection"
    hash: String!
    "vk.com owner id of a post"
    ownerId: String!
    "vk.com post id of a post"
    postId: String!
    type: String!
}

"Embed a VK.com video"
type VKVideo implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "vk.com hash for the widget connection (vk query parameter 'hash')"
    hash: String!
    "vk.com owner id of a post (vk query parameter 'oid')"
    ownerId: String!
    type: String!
    "vk.com video ID (query parameter 'id')"
    videoId: String!
}

"A video clip"
type Video implements ContentResource & VideoResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    extraFor(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    "If set to true, embedding should not be offered for this asset. Used for exclusive content that should only live on redbull.com"
    noEmbedding: Boolean
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The partner who sponsored the creation of a content piece (financial or other support)"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Available subtitle-languages for the video asset in [RFC 5646](https://tools.ietf.org/html/rfc5646) notation. E.g. \"en\", \"en-US\", etc."
    subtitleLanguages: [String]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
    videoDurationSeconds: Int
    "Reference to video archive for playback (e.g. mediabase RBMN API)"
    videoEssence: AbstractService
    "Aspect ratio of the video-frame (width / height)"
    videoFrameAspectRatio: Float
}

"360 degree videos (or VR videos)"
type Video360 implements ContentResource & VideoResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    "If set to true, embedding should not be offered for this asset. Used for exclusive content that should only live on redbull.com"
    noEmbedding: Boolean
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "The partner who sponsored the creation of a content piece (financial or other support)"
    sponsoredBy(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    "Available subtitle-languages for the video asset in [RFC 5646](https://tools.ietf.org/html/rfc5646) notation. E.g. \"en\", \"en-US\", etc."
    subtitleLanguages: [String]
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
    videoDurationSeconds: Int
    "Reference to video archive for playback (e.g. mediabase RBMN API)"
    videoEssence: AbstractService
    "Aspect ratio of the video-frame (width / height)"
    videoFrameAspectRatio: Float
}

"A channel featuring channel specific video content and a channel specific continuous stream."
type VideoChannel implements ContentResource {
    "Fetch attached Collections feed"
    attachedCollections(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    author: String
    callToActions: [AttributeCallToAction]
    "User defined terms to classify content."
    contentClassificationTerms: [String]
    "Lists all content-collections that are automatically assigned through the tag tree. Collections are automatically assigned if the `autoAssign` attribute of the collection is set to `true` and one of the tags set on the content resource is also available on the content collection's `mappedTags` relationship."
    contentCollections(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentCollection]
    contextualTitle: AttributeContextualTextAttribute
    "Custom properties which can be added to content-resources (E.g. configuration of theming properites, etc.) Note that custom properties are not governed by the content-schema. It is therefore not guaranteed that certain custom properties exist. We also do not migrate custom properties if the schema evolves."
    customProperties: AttributeKeyValue
    "A list of text blocks containing textual event information. Not all elements may be presented to the user by default. Kepp the first textualAretfactContainer consise (recommended less than 250 chars)"
    description: [AttributeTextualArtefactContainer]
    displayTags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag] @deprecated(reason : "Display-tags are replaced with content-collections. Use relationship `contentCollections` instead. For further details check out http://bit.ly/2F9w93H")
    "A user facing date when a certain content-piece was updated the last time. This date is changed whenever a significant change was made to a content piece. An editor can decide when this date should be updated."
    editorialLastUpdatedDate: AttributeDateTime
    "All resources embedded in attributes"
    embeddedResources(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Content element (usually images) used for featuring of a content element"
    featuredMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "Countries in which the resource is geo-blocked Resembled through two-letter ISO_3166-1_alpha-2 country codes"
    geoBlockedIn: [String]
    "Content piece shown in the header of another content element (e.g. image shown in the header of a story)"
    headerMedia(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    "The id of the resource"
    id: ID!
    "Content will be included in related-to queries if it is tagged with one of these tags or any children of the selectd tags."
    includeContentTaggedWith(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "Marks a resource as placeholder."
    isPlaceholder: Boolean
    "RB2 content ID."
    legacyContentId: String
    locations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Location]
    "Optional logo for a content piece (e.g. logo for an event-profile)"
    logo(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Image]
    "Reference to the master resource holding all translations"
    master(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    meta: ContentResourceMetaData
    partners(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [PartnerProfile]
    "Content classification rating from the scheduling team."
    planningClassification: [String]
    pseudoGroups(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [Tag]
    "The initial published date of the resoruce. This date is set automatically if the resource is moved from \"draft\" to \"published\" state the first time."
    publishedDate: AttributeDateTime
    "Fetch related content to the content resource"
    relatedContentFeed(
        "Specify the cursor for pagination. Get the cursor from the last item from the pageInfo field."
        after: String,
        "Specify a custom reference date instead of today."
        contextDate: String,
        "Add filter for feed to filter on attribute, relationship or meta fields"
        filter: Filter,
        "Number of elements that should be returned."
        first: Int,
        "Also fetch and return assets in draft state. If not set, use argument from root. If not available on root, use default"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets. If not set, use argument from root. If not available on root, use default"
        includeUnpublished: Boolean,
        "If not set, uses localMixing from root. If localeMixing is not available on root the locale of the context object itself"
        localeMixing: [String],
        "Scoring function according to which the feed should be sorted"
        scoring: ScoringFunctions,
        "List of defaultSpaces from which content should be returned."
        spaces: [String]
    ): QueryFeedConnection
    relatedContents(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "A list of search terms which result in a full-natch of a given content resource."
    searchTerms: [String]
    "An additional title of a resource. E.g. films often do have subheadings like \"Streif - One Hell of a Ride\" where \"One Hell of a Ride\" would be the subHeading"
    subHeading: AttributeText
    tags(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    teaser: AttributeText
    title: AttributeText
    trackingDimensions: JSON
    translatedFrom(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): ContentResource
    translations(
        "Adds locales to the already defined localeMixingStrategy, rather than overriding it. Relationships will be filtered by the previously defined localeMixingStrategy, includingfeed Request, localeMixing and the complementary defined locales."
        complementaryLocaleMixing: LocaleDeduplicationScalarType,
        "Disable removal of geo-blocked assets based on the primary locale. Setting is inherited from the root-field"
        enforceGeoBlocking: Boolean,
        "Filter relationships e.g. on type."
        filter: RelationshipFilter,
        "Fetch first n elements of a relationship"
        first: Int,
        "Also fetch and return assets in draft state"
        includeDraft: Boolean,
        "Also fetch and return unpublished assets"
        includeUnpublished: Boolean,
        "Fetch last n elements of a relationship"
        last: Int,
        "Set locales a relationship should be filtered for. The locales will be picked based on the order of locales provided. It is possible to configure fallback to languages ['en-INT', 'en'] (all locales with language en) or even fallback to any locale ['en-INT', 'en', '*'] (which essentially would only deduplicate a relationship without filtering)"
        localeDeduplication: LocaleDeduplicationScalarType
    ): [ContentResource]
    "The type of the resource"
    type: String!
    "Must be unique across content GUID+language and may be reused for different locales"
    uriSlug: String
    "If provided, the URL should be used instead of dynamic routes (based on urislug) to link to the content resource (can be used to add resources which are presented outside the RB3 platform)"
    url: AttributeWebLink
    "Restrictions for which a content element should not be used."
    usageRestrictions: [String]
    "Reference to the linear stream"
    videoEssence: AbstractService
}

"Embed a vimeo video"
type VimeoVideo implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    hideByline: Boolean!
    hideDescription: Boolean!
    hidePortrait: Boolean!
    "The id of the vimeo video"
    id: Int!
    type: String!
}

"Embed a video clip from vine"
type VineVideoClip implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    displayType: String!
    "The video id of a vine video-clip."
    id: String!
    type: String!
}

"Embed a wayin visual"
type WayinEmbed implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    id: String!
    type: String!
}

"Add a wufoo form"
type WufooForm implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "Wufoo form hash (e.g. m1dlbqf20gr2oab)"
    formHash: String!
    type: String!
    "Wufoo forms username"
    userName: String!
}

"Embed a youtube video"
type YoutubeVideo implements AbstractService {
    attributes: JSON! @deprecated(reason : "We will fade out access to the raw JSON structure of services. Use the fields directly through GraphQL")
    "The playlist from which the video should be played ('list=' parameter)"
    playlistId: String
    type: String!
    "The video ID of a youtube video. (not the youtube URL!) See https://www.google.at/?q=Youtube+video+id"
    videoId: String
}

"Enumeration type."
enum Enumerations {
    bullet
    labeled
    numeric
}

"Crop will cut the image to the desired aspect ratio before scaling. Scale will not crop the image and scale the image down so that the longer edge does not exceed the defined height or width. With scale, the original aspect ratio is retained and all of the original image is visible"
enum ImageModes {
    crop
    scale
}

"RBMN resource types. Valid values are 'short_preview', 'proxy', 'subtitle_webvtt', 'reference_keyframe' and 'sprites'"
enum RBMNResourceTypes {
    proxy
    reference_keyframe
    short_preview
    sprites
    subtitle_webvtt
}

"Select a scoring function to specify based on which business rules content should be prioritised"
enum ScoringFunctions {
    aggregate
    featured
    featuredFresh
    featuredRelatedFresh
    freshness
    masonry
    masonryLive
    popular
    recommended
    relatedFresh
    search
}

"Valid featuredFresh scoring function"
input FeaturingRecordFeaturedFreshScoringFunctionOperator {
    "When looking for featuring records, we will only look for records with a `primaryLocale` in the given locale mixing strategy."
    localeMixing: ScoringFunctionOperator
    "Only featuring records with the specified `subType` will be considered"
    subType: ScoringFunctionOperator
}

"Valid featured scoring function"
input FeaturingRecordFeaturedScoringFunctionOperator {
    "Specify the context objects for the `featured` scoring function, multiple context objects are supported"
    contextObject: ScoringFunctionOperator
    "When looking for featuring records, we will only look for records with a `primaryLocale` in the given locale mixing strategy."
    localeMixing: ScoringFunctionOperator
    "Only featuring records with the specified `subType` will be considered"
    subType: ScoringFunctionOperator
}

"Specify the featuring record for scoring function"
input FeaturingRecordForScoringFunction {
    aggregate: FeaturingRecordRelatedToScoringFunctionOperator
    featured: FeaturingRecordFeaturedScoringFunctionOperator
    featuredFresh: FeaturingRecordFeaturedFreshScoringFunctionOperator
    related: FeaturingRecordRelatedToScoringFunctionOperator
}

"Valid related to scoring function"
input FeaturingRecordRelatedToScoringFunctionOperator {
    "specify the context objects for the `related` scoring function, multiple context objects are supported"
    relatedTo: ScoringFunctionOperator
}

"Specify descending or ascending order."
input FeedSort {
    "Comma separated list of properties by which to sort the results"
    asc: String
    "Comma separated list of properties by which to sort the results"
    desc: String
}

"Filter Object"
input Filter {
    alternativeLabels: Operators
    author: Operators
    autoAssign: Operators
    biography: Operators
    birthDate: Operators
    body: Operators
    callToActions: Operators
    careerStart: Operators
    clipEssence: Operators
    contentCategory: Operators
    contentClassificationTerms: Operators
    contextualTitle: Operators
    customProperties: Operators
    description: Operators
    disciplines: Operators
    editorial: Operators
    editorialLastUpdatedDate: Operators
    endDate: Operators
    episodeNumber: Operators
    essence: Operators
    eventDescription: Operators
    eventDetails: Operators
    eventTimeTable: Operators
    externalServiceLinks: Operators
    facts: Operators
    familyName: Operators
    gender: Operators
    geoBlockedIn: Operators
    givenName: Operators
    hiddenLabels: Operators
    hosts: Operators
    href: Operators
    imageEssence: Operators
    imageEssenceContainsCaption: Operators
    isDisplayTag: Operators
    isHostedByRedBull: Operators
    isPlaceholder: Operators
    isPrimary: Operators
    isSponsored: Operators
    label: Operators
    language: Operators
    legacyContentId: Operators
    liveStatus: Operators
    location: Operators
    mediaBaseTaxonomyReference: Operators
    meta_createdBy: Operators
    meta_dateCreated: Operators
    meta_dateUpdated: Operators
    meta_foreignKeys: Operators
    meta_language: Operators
    meta_locale: Operators
    meta_published: Operators
    meta_region: Operators
    meta_spaces: Operators
    meta_updatedBy: Operators
    nickName: Operators
    noEmbedding: Operators
    planningClassification: Operators
    playabilityEnd: Operators
    playabilityStart: Operators
    productRelatedQuote: Operators
    publishedDate: Operators
    quote: Operators
    rbtvLiveStreamId: Operators
    relatedContentContainers: Operators
    relationships_broaderTag: Operators
    relationships_contentCollections: Operators
    relationships_displayTags: Operators
    relationships_embeddedResources: Operators
    relationships_episodes: Operators
    relationships_events: Operators
    relationships_excludeContentTaggedWith: Operators
    relationships_extraFor: Operators
    relationships_extras: Operators
    relationships_featuredMedia: Operators
    relationships_headerMedia: Operators
    relationships_images: Operators
    relationships_includeContentTaggedWith: Operators
    relationships_live: Operators
    relationships_livePrimary: Operators
    relationships_locations: Operators
    relationships_logo: Operators
    relationships_mappedTags: Operators
    relationships_master: Operators
    relationships_members: Operators
    relationships_participatingPersons: Operators
    relationships_participatingTeams: Operators
    relationships_partners: Operators
    relationships_pressAndMedia: Operators
    relationships_preview: Operators
    relationships_pseudoGroups: Operators
    relationships_recap: Operators
    relationships_relatedContents: Operators
    relationships_results: Operators
    relationships_rules: Operators
    relationships_season: Operators
    relationships_seasons: Operators
    relationships_series: Operators
    relationships_show: Operators
    relationships_sponsoredBy: Operators
    relationships_tagHierarchy: Operators
    relationships_tags: Operators
    relationships_translatedFrom: Operators
    relationships_translations: Operators
    searchTerms: Operators
    seasonNumber: Operators
    socialBuzz: Operators
    softFacts: Operators
    sportsNetId: Operators
    startDate: Operators
    status: Operators
    statusLabel: Operators
    statusMessage: Operators
    subHeading: Operators
    subPages: Operators
    subType: Operators
    subtitleLanguages: Operators
    teaser: Operators
    title: Operators
    trackRecord: Operators
    transcript: Operators
    type: Operators
    uriSlug: Operators
    url: Operators
    usageRestrictions: Operators
    videoDurationSeconds: Operators
    videoEssence: Operators
    videoFrameAspectRatio: Operators
}

"Filter locales by locale, language or region"
input LocalesFilter {
    language: LocalesFilterOperator
    locale: LocalesFilterOperator
    region: LocalesFilterOperator
}

"Valid filter operations on locale"
input LocalesFilterOperator {
    "Resource value equal to specified filter value"
    eq: String!
}

"Input type operators"
input Operators {
    eq: [String]
    exists: Boolean
    gt: String
    gte: String
    lt: String
    lte: String
    not: [String]
}

"Input type operators"
input RBMNResourceTypeFilterOperators {
    eq: RBMNResourceTypes
}

"Filter relationships by type. (e.g. stories)"
input RelationshipFilter {
    type: RelationshipFilterOperators
}

"Input type operators"
input RelationshipFilterOperators {
    eq: [String]
}

"Filter resources by type. (e.g. sprites)"
input ResourceTypeFilter {
    type: RBMNResourceTypeFilterOperators
}

"Valid scoring function"
input ScoringFunctionOperator {
    eq: String!
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"This can either be an Array of strings or boolean."
scalar LocaleDeduplicationScalarType

"The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSONObject
